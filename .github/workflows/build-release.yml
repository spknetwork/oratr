name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    env:
      CSC_IDENTITY_AUTO_DISCOVERY: false
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Linux packaging deps
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get update && sudo apt-get install -y rpm

      - name: Run tests
        run: npm test

      - name: Build for Linux
        if: matrix.os == 'ubuntu-latest'
        run: npm run build:linux

      - name: Build for Windows
        if: matrix.os == 'windows-latest'
        run: npm run build:win

      - name: Build for macOS
        if: matrix.os == 'macos-latest'
        run: npm run build:mac

      - name: List Linux build outputs
        if: matrix.os == 'ubuntu-latest'
        run: |
          echo "=== Build outputs ==="
          ls -la dist/
          
      - name: Upload Linux artifacts
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: linux-builds
          path: |
            dist/*.AppImage
            dist/*.deb
            dist/*.rpm

      - name: Upload Windows artifacts
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: windows-builds
          path: |
            dist/*.exe
            dist/*-win.zip

      - name: Upload macOS artifacts
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: macos-builds
          path: |
            dist/*.dmg
            dist/*-mac.zip

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: List downloaded artifacts
        run: |
          echo "=== Downloaded artifacts structure ==="
          ls -la
          echo "=== Linux builds ==="
          ls -la linux-builds/ || echo "No linux-builds directory"
          echo "=== Windows builds ==="
          ls -la windows-builds/ || echo "No windows-builds directory"
          echo "=== macOS builds ==="
          ls -la macos-builds/ || echo "No macos-builds directory"

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: SPK Desktop ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Find Linux AppImage
        id: find_appimage
        run: |
          APPIMAGE=$(find linux-builds -name "*.AppImage" -type f | head -1)
          echo "appimage_path=$APPIMAGE" >> $GITHUB_OUTPUT
          echo "Found AppImage: $APPIMAGE"

      - name: Upload Linux AppImage
        if: steps.find_appimage.outputs.appimage_path != ''
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.find_appimage.outputs.appimage_path }}
          asset_name: SPK-Desktop-Linux.AppImage
          asset_content_type: application/octet-stream

      - name: Find Linux DEB
        id: find_deb
        run: |
          DEB=$(find linux-builds -name "*.deb" -type f | head -1)
          echo "deb_path=$DEB" >> $GITHUB_OUTPUT
          echo "Found DEB: $DEB"

      - name: Upload Linux DEB
        if: steps.find_deb.outputs.deb_path != ''
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.find_deb.outputs.deb_path }}
          asset_name: SPK-Desktop-Linux.deb
          asset_content_type: application/vnd.debian.binary-package

      - name: Find Linux RPM
        id: find_rpm
        run: |
          RPM=$(find linux-builds -name "*.rpm" -type f | head -1)
          echo "rpm_path=$RPM" >> $GITHUB_OUTPUT
          echo "Found RPM: $RPM"

      - name: Upload Linux RPM
        if: steps.find_rpm.outputs.rpm_path != ''
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.find_rpm.outputs.rpm_path }}
          asset_name: SPK-Desktop-Linux.rpm
          asset_content_type: application/x-rpm

      - name: Find Windows Installer
        id: find_exe
        run: |
          EXE=$(find windows-builds -name "*.exe" -type f | head -1)
          echo "exe_path=$EXE" >> $GITHUB_OUTPUT
          echo "Found EXE: $EXE"

      - name: Upload Windows Installer
        if: steps.find_exe.outputs.exe_path != ''
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.find_exe.outputs.exe_path }}
          asset_name: SPK-Desktop-Windows.exe
          asset_content_type: application/octet-stream

      - name: Find Windows Portable ZIP
        id: find_winzip
        run: |
          WINZIP=$(find windows-builds -name "*-win.zip" -type f | head -1)
          echo "winzip_path=$WINZIP" >> $GITHUB_OUTPUT
          echo "Found Windows ZIP: $WINZIP"

      - name: Upload Windows Portable ZIP
        if: steps.find_winzip.outputs.winzip_path != ''
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.find_winzip.outputs.winzip_path }}
          asset_name: SPK-Desktop-Windows.zip
          asset_content_type: application/zip

      - name: Find macOS DMG
        id: find_dmg
        run: |
          DMG=$(find macos-builds -name "*.dmg" -type f | head -1)
          echo "dmg_path=$DMG" >> $GITHUB_OUTPUT
          echo "Found DMG: $DMG"

      - name: Upload macOS DMG
        if: steps.find_dmg.outputs.dmg_path != ''
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.find_dmg.outputs.dmg_path }}
          asset_name: SPK-Desktop-macOS.dmg
          asset_content_type: application/octet-stream

      - name: Find macOS ZIP
        id: find_maczip
        run: |
          MACZIP=$(find macos-builds -name "*-mac.zip" -type f | head -1)
          echo "maczip_path=$MACZIP" >> $GITHUB_OUTPUT
          echo "Found macOS ZIP: $MACZIP"

      - name: Upload macOS ZIP
        if: steps.find_maczip.outputs.maczip_path != ''
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.find_maczip.outputs.maczip_path }}
          asset_name: SPK-Desktop-macOS.zip
          asset_content_type: application/zip